<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="it">
<head>
<!-- Generated by javadoc (version 1.7.0_21) on Thu Sep 17 18:13:50 CEST 2015 -->
<title>Simulator</title>
<meta name="date" content="2015-09-17">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Simulator";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Simulator.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../FSA/FSA.html" title="class in FSA"><span class="strong">Prev Class</span></a></li>
<li><a href="../FSA/Transition.html" title="class in FSA"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?FSA/Simulator.html" target="_top">Frames</a></li>
<li><a href="Simulator.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">FSA</div>
<h2 title="Class Simulator" class="title">Class Simulator</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>FSA.Simulator</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>Direct Known Subclasses:</dt>
<dd><a href="../FMA/FMASimulator.html" title="class in FMA">FMASimulator</a>, <a href="../PFSA/PFSASimulator.html" title="class in PFSA">PFSASimulator</a></dd>
</dl>
<hr>
<br>
<pre>public class <span class="strong">Simulator</span>
extends java.lang.Object</pre>
<div class="block">This class simulates a running of a FSA for accepting/refuting a string in input</div>
<dl><dt><span class="strong">Author:</span></dt>
  <dd>Davide Basile</dd></dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected <a href="../FSA/FSA.html" title="class in FSA">FSA</a></code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#automa">automa</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected int</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#pointer_state">pointer_state</a></strong></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected int</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#pointer_string">pointer_string</a></strong></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../FSA/Simulator.html#Simulator(FSA.FSA)">Simulator</a></strong>(<a href="../FSA/FSA.html" title="class in FSA">FSA</a>&nbsp;automa)</code>
<div class="block">The constructor</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected <a href="../FSA/Transition.html" title="class in FSA">Transition</a></code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#backtracking(java.util.Vector, java.util.Vector)">backtracking</a></strong>(java.util.Vector&lt;<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&gt;&nbsp;continuation,
            java.util.Vector&lt;<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&gt;&nbsp;visited)</code>
<div class="block">Select a transition in the continuation that is not visited,  save it in the visited continuation and restore the state of the continuation.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#changeAutoma(FSA.FSA)">changeAutoma</a></strong>(<a href="../FSA/FSA.html" title="class in FSA">FSA</a>&nbsp;automa)</code>
<div class="block">Change the automaton to simulate</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected boolean</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#checkContinuation(FSA.Transition, int)">checkContinuation</a></strong>(<a href="../FSA/Transition.html" title="class in FSA">Transition</a>&nbsp;tr,
                 int&nbsp;symbol)</code>
<div class="block">If a transition was selected in the continuation (tr not null), then perform the step by updating the state of the simulator</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected static int</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#contains(int, int[])">contains</a></strong>(int&nbsp;n,
        int[]&nbsp;a)</code>
<div class="block">check if n is contained in a</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected static int</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#contains(int, java.util.Vector)">contains</a></strong>(int&nbsp;n,
        java.util.Vector&nbsp;v)</code>
<div class="block">Check if n is contained in the vector v</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected <a href="../FSA/Continuation.html" title="class in FSA">Continuation</a></code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#createContinuation()">createContinuation</a></strong>()</code>
<div class="block">Freeze the actual state of the simulator in a continuation</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected boolean</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#isValid(FSA.Transition, int)">isValid</a></strong>(<a href="../FSA/Transition.html" title="class in FSA">Transition</a>&nbsp;tr,
       int&nbsp;symbol)</code>
<div class="block">Check if the transition can be performed</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected void</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#restoreStateContinuation(FSA.Continuation)">restoreStateContinuation</a></strong>(<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&nbsp;c)</code>
<div class="block">restore the state of the simulator freezed in the continuation c</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#run(int[])">run</a></strong>(int[]&nbsp;s)</code>
<div class="block">At every iteration:
 
                
                        
                                first check if the string is consumed, then if we are in a final state and the side conditions are verified then the string is accepted, 
                                else backtracking if possible, otherwise return false
                        
                
                if the string is not consumed yet:
                        
                                                if there is a continuation then performs the step stored
                                                else if there are possible steps then performs one and store the others in the continuation
                                                if no possible step are allowed, then performs backtracking or if the continuation is empty return false
                        
                
 </div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected boolean</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#sideConditions()">sideConditions</a></strong>()</code>
<div class="block">A method to be extended in case of additional conditions of acceptance</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected boolean</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#step(int, java.util.Vector, java.util.Vector)">step</a></strong>(int&nbsp;symbol,
    java.util.Vector&lt;<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&gt;&nbsp;continuation,
    java.util.Vector&lt;<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&gt;&nbsp;visited)</code>
<div class="block">Select all the possible transition that can be executed in this configuration, then perform the first transition and store all the other in the continuation.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected void</code></td>
<td class="colLast"><code><strong><a href="../FSA/Simulator.html#updateState(FSA.Transition, int)">updateState</a></strong>(<a href="../FSA/Transition.html" title="class in FSA">Transition</a>&nbsp;tr,
           int&nbsp;symbol)</code>
<div class="block">Update the state of the simulator by performing the transition tr</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="pointer_state">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pointer_state</h4>
<pre>protected&nbsp;int pointer_state</pre>
</li>
</ul>
<a name="pointer_string">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pointer_string</h4>
<pre>protected&nbsp;int pointer_string</pre>
</li>
</ul>
<a name="automa">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>automa</h4>
<pre>protected&nbsp;<a href="../FSA/FSA.html" title="class in FSA">FSA</a> automa</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Simulator(FSA.FSA)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Simulator</h4>
<pre>public&nbsp;Simulator(<a href="../FSA/FSA.html" title="class in FSA">FSA</a>&nbsp;automa)</pre>
<div class="block">The constructor</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>automa</code> - The automaton to simulate</dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="changeAutoma(FSA.FSA)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>changeAutoma</h4>
<pre>public&nbsp;void&nbsp;changeAutoma(<a href="../FSA/FSA.html" title="class in FSA">FSA</a>&nbsp;automa)</pre>
<div class="block">Change the automaton to simulate</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>automa</code> - </dd></dl>
</li>
</ul>
<a name="run(int[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>run</h4>
<pre>public&nbsp;boolean&nbsp;run(int[]&nbsp;s)</pre>
<div class="block">At every iteration:
 <ul>
                <li>
                        <ul>
                                <li>first check if the string is consumed, then if we are in a final state and the side conditions are verified then the string is accepted,</li> 
                                <li>else backtracking if possible, otherwise return false</li>
                        </ul>
                </li>
                <li>if the string is not consumed yet:
                        <ul>
                                                <li>if there is a continuation then performs the step stored</li>
                                                <li>else if there are possible steps then performs one and store the others in the continuation</li>
                                                <li>if no possible step are allowed, then performs backtracking or if the continuation is empty return false</li>
                        </ul>
                </li>
 </ul></div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>s</code> - the string to be recognized</dd>
<dt><span class="strong">Returns:</span></dt><dd>true if s is recognized by the automata, false otherwise</dd></dl>
</li>
</ul>
<a name="checkContinuation(FSA.Transition, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>checkContinuation</h4>
<pre>protected&nbsp;boolean&nbsp;checkContinuation(<a href="../FSA/Transition.html" title="class in FSA">Transition</a>&nbsp;tr,
                        int&nbsp;symbol)</pre>
<div class="block">If a transition was selected in the continuation (tr not null), then perform the step by updating the state of the simulator</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>tr</code> - transition to perform</dd><dd><code>symbol</code> - the symbol in input</dd>
<dt><span class="strong">Returns:</span></dt><dd>true if tr is not null, otherwise false</dd></dl>
</li>
</ul>
<a name="backtracking(java.util.Vector, java.util.Vector)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>backtracking</h4>
<pre>protected&nbsp;<a href="../FSA/Transition.html" title="class in FSA">Transition</a>&nbsp;backtracking(java.util.Vector&lt;<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&gt;&nbsp;continuation,
                      java.util.Vector&lt;<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&gt;&nbsp;visited)</pre>
<div class="block">Select a transition in the continuation that is not visited,  save it in the visited continuation and restore the state of the continuation.
 If no transitions are available then return null</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>continuation</code> - vector of continuation to be visited</dd><dd><code>visited</code> - vector of visited continuation</dd>
<dt><span class="strong">Returns:</span></dt><dd>the Transition to be performed or null if no transition are available</dd></dl>
</li>
</ul>
<a name="restoreStateContinuation(FSA.Continuation)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>restoreStateContinuation</h4>
<pre>protected&nbsp;void&nbsp;restoreStateContinuation(<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&nbsp;c)</pre>
<div class="block">restore the state of the simulator freezed in the continuation c</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>c</code> - the continuation to be restored</dd></dl>
</li>
</ul>
<a name="sideConditions()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sideConditions</h4>
<pre>protected&nbsp;boolean&nbsp;sideConditions()</pre>
<div class="block">A method to be extended in case of additional conditions of acceptance</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>true</dd></dl>
</li>
</ul>
<a name="updateState(FSA.Transition, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>updateState</h4>
<pre>protected&nbsp;void&nbsp;updateState(<a href="../FSA/Transition.html" title="class in FSA">Transition</a>&nbsp;tr,
               int&nbsp;symbol)</pre>
<div class="block">Update the state of the simulator by performing the transition tr</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>tr</code> - the transition to be performed</dd><dd><code>symbol</code> - the symbol in input</dd></dl>
</li>
</ul>
<a name="isValid(FSA.Transition, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isValid</h4>
<pre>protected&nbsp;boolean&nbsp;isValid(<a href="../FSA/Transition.html" title="class in FSA">Transition</a>&nbsp;tr,
              int&nbsp;symbol)</pre>
<div class="block">Check if the transition can be performed</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>tr</code> - transition to be performed</dd><dd><code>symbol</code> - symbol in input</dd>
<dt><span class="strong">Returns:</span></dt><dd>true if the transition is valid</dd></dl>
</li>
</ul>
<a name="step(int, java.util.Vector, java.util.Vector)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>step</h4>
<pre>protected&nbsp;boolean&nbsp;step(int&nbsp;symbol,
           java.util.Vector&lt;<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&gt;&nbsp;continuation,
           java.util.Vector&lt;<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&gt;&nbsp;visited)</pre>
<div class="block">Select all the possible transition that can be executed in this configuration, then perform the first transition and store all the other in the continuation.
        Finally save the performed transition in the visited continuation.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>symbol</code> - the symbol in input</dd><dd><code>continuation</code> - the vector of continuation to be performed</dd><dd><code>visited</code> - the vector of visited continuation</dd>
<dt><span class="strong">Returns:</span></dt><dd>true if a step is performed, otherwise false</dd></dl>
</li>
</ul>
<a name="createContinuation()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createContinuation</h4>
<pre>protected&nbsp;<a href="../FSA/Continuation.html" title="class in FSA">Continuation</a>&nbsp;createContinuation()</pre>
<div class="block">Freeze the actual state of the simulator in a continuation</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>a new Continuation with the actual state of the simulator freezed</dd></dl>
</li>
</ul>
<a name="contains(int, int[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>contains</h4>
<pre>protected static&nbsp;int&nbsp;contains(int&nbsp;n,
           int[]&nbsp;a)</pre>
<div class="block">check if n is contained in a</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - integer to search</dd><dd><code>a</code> - array of integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>the index of the element of the array that contains n, -1 if the element is not contained</dd></dl>
</li>
</ul>
<a name="contains(int, java.util.Vector)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>contains</h4>
<pre>protected static&nbsp;int&nbsp;contains(int&nbsp;n,
           java.util.Vector&nbsp;v)</pre>
<div class="block">Check if n is contained in the vector v</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - the integer to be searched</dd><dd><code>v</code> - a vector of integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>if n is found then return the index of n in v, otherwise -1</dd></dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Simulator.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../FSA/FSA.html" title="class in FSA"><span class="strong">Prev Class</span></a></li>
<li><a href="../FSA/Transition.html" title="class in FSA"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?FSA/Simulator.html" target="_top">Frames</a></li>
<li><a href="Simulator.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
