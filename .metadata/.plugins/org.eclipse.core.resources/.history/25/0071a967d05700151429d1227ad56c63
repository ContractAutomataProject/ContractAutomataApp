package CA;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import FSA.FSA;
import FSA.Simulator;
import FSA.Transition;



/**
 * @author Davide Basile
 *
 */
@SuppressWarnings("serial")
public class CA  extends FSA implements java.io.Serializable
{
	private int[][] states;
	private int[][] finalstates;
	private Transition[] tra;
	private static String message = "*** CA simulator ***\n";
	
	/**
	 * Invoke the super constructor and take in input the added new parameters of the automaton
	 */
	public CA()
	{

		super(message);
		System.out.println(message);
		try{
			InputStreamReader reader = new InputStreamReader (System.in);
	        BufferedReader myInput = new BufferedReader (reader);
	        System.out.println("You are creating a principal contract automaton.");
			System.out.println("Insert the number of states:");
	        this.states = new int[Integer.parseInt(myInput.readLine())][];
	        for (int i=0;i<this.states.length;i++)
	        {
	        	states[i] = new int[0];
	        	states[i][0]=i;
	        }
	        System.out.println("The state 0 is automatically recognised as initial");
	        
			System.out.println("Insert the number of final states");
			finalstates = new int[Integer.parseInt(myInput.readLine())][];
			for(int i=0;i<finalstates.length;i++){
	        	System.out.println("Insert the Id of the final states number " + i);
	        	finalstates[i]= new int[1];
	        	finalstates[i][0]= Integer.parseInt(myInput.readLine());
	        }
			System.out.println("Insert the number of transitions:");
			int num_trans= Integer.parseInt(myInput.readLine());
			tra = new Transition[num_trans];
			for (int i=0;i<num_trans;i++)
				tra[i] = createTransition(i);
		}
		catch (Exception e){System.out.println("Errore inserimento");}
	}

	
	
	
	/**
	 * Print in output a description of the automaton
	 */
	public void print()
	{
		super.print();
	}
	
	
	
	/**
	 * Create an instance of the simulator for an FMA
	 */
	protected Simulator createSim()
	{
		//return new FMASimulator(this);
		return null;
	}
	
	/**
	 * 
	 * @param i		the index of the transition to be showed as a message to the user
	 * @return		a new Transition for this automaton
	 */
	protected Transition createTransition(int i)
	{
		return new CATransition(i);
	}
	
}
